esphome:
  name: "pantry-light"
  friendly_name: "pantry-light"

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "NJshTk2oLAwfB/6Gk9wkDlncEUodjSYRWQWWnJeOs5g="

ota:
  password: "d9eff790a4dd41bf7e716640bad59dca"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test Fallback Hotspot"
    password: "3ruOZMcwtkJH"

captive_portal:

output:
  - platform: esp8266_pwm
    pin: 15
    frequency: 1000 Hz
    id: pwm_b
  - platform: esp8266_pwm
    pin: 13
    frequency: 1000 Hz
    id: pwm_g
  - platform: esp8266_pwm
    pin: 12
    frequency: 1000 Hz
    id: pwm_r
  - platform: esp8266_pwm
    pin: 14
    frequency: 1000 Hz
    id: pwm_w1

light:
  - platform: rgbw
    name: "H801 Light"
    id: LED_RGBW
    red: pwm_r
    green: pwm_g       
    blue: pwm_b
    white: pwm_w1
    effects:
      - lambda:
          name: randomflicker
          update_interval: 200 ms
          lambda: |-
            auto call = id(LED_RGBW).turn_on();
            float r = random_float() * 2.0f - 1.0f; 
            r =  r * r * r;
            call.set_transition_length(r);
            //static double br=id(global_brightness);
            call.set_brightness(0.7 + r/10);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: Disco
          update_interval: 500ms
          lambda: |-
            auto call = id(LED_RGBW).turn_on();
            //call.set_transition_length(rand() % 400 + 1);
            call.set_transition_length(500);
            call.set_white(0.0);
            esphome::Color c = esphome::Color::random_color();
            call.set_rgb((c.red)/255.0, (c.green)/255.0, (c.blue)/255.0);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: WTF
          update_interval: 200ms
          lambda: |-
            auto call = id(LED_RGBW).turn_on();
            call.set_transition_length(200);
            call.set_white(0.0);
            call.set_brightness((rand() % 255 + 1) / 255.0);
            call.set_color_temperature(rand() % 2 == 0 ? 0: 512);
            call.perform();
      - strobe:
          name: Lightning
          colors:
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 100%
              duration: 50ms
            - state: False
              duration: 50ms
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 100%
              duration: 160ms
            - state: False
              duration: 50ms
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 100%
              duration: 50ms
            - state: False
              duration: 3000ms
      - strobe:
          name: In Alarm
          colors:
            - state: True
              red: 100%
              blue: 0%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 100%
              blue: 0%
              green: 0%
              white: 0%  
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 0%
              blue: 100%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 0%
              blue: 100%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
      - strobe:
          name: Strobe Effect
          colors:
            - state: True
              red: 100%
              green: 90%
              blue: 0%
              white: 0%
              duration: 50ms
            - state: False
              duration: 25ms
            - state: True
              red: 0%
              green: 100%
              blue: 0%
              white: 0%
              duration: 50ms
            - state: False
              duration: 25ms
            - state: True
              red: 0%
              green: 0%
              blue: 100%
              white: 0%
              duration: 50ms
            - state: False
              duration: 25ms
            - state: True
              red: 0%
              green: 0%
              blue: 0%
              white: 100%
              duration: 50ms              

      - lambda:
          name: RGB Breathing
          update_interval: 16s
          lambda: |-
            #define Color1 1.0, 0.0, 0.0 //These are the colors defined, feel free to change or extend the list
            #define Color2 1.0, 0.5, 0.0 //if you extend the list, dont forget to add them in the switch loop below
            #define Color3 1.0, 1.0, 0.0 //and remember to adjust the reset counter at the bottom
            #define Color4 0.5, 1.0, 0.0
            #define Color5 0.0, 1.0, 0.0
            #define Color6 0.0, 1.0, 0.5
            #define Color7 0.0, 1.0, 1.0
            #define Color8 0.0, 0.5, 1.0
            #define Color9 0.0, 0.0, 1.0
            #define Color10 0.5, 0.0, 1.0
            #define Color11 0.5, 0.0, 1.0
            #define Color12 1.0, 0.0, 0.5
            static int state = 0;
            static int color = 1;
            auto call = id(LED_RGBW).turn_on(); //put the id for your light in here
            call.set_white(0.0);
            call.set_transition_length(15000);
            if (state == 0) 
            {
            call.set_brightness(0.01);
            
            }
            else if (state == 1)
            {
              switch(color)
              {
                case 1: call.set_rgb(Color1);
                        break;
                case 2: call.set_rgb(Color2);
                        break;
                case 3: call.set_rgb(Color3);
                        break;
                case 4: call.set_rgb(Color4);
                        break;
                case 5: call.set_rgb(Color5);
                        break;
                case 6: call.set_rgb(Color6);
                        break;
                case 7: call.set_rgb(Color7);
                        break;
                case 8: call.set_rgb(Color8);
                        break;
                case 9: call.set_rgb(Color9);
                        break;
                case 10: call.set_rgb(Color10);
                          break;
                case 11: call.set_rgb(Color11);
                          break;
                case 12: call.set_rgb(Color12);
                          break;
              }
              call.set_brightness(1.0);
            }
            
            state ++;
            if (state == 2){
            state = 0;
            }
            color++;
            if(color == 7)
            {
              color = 1;
            }
            call.perform();
      - random:          
          name: "Slow Random Effect"
          transition_length: 20s
          update_interval: 20s
      - random:
          name: "Fast Random Effect"
          transition_length: 4s
          update_interval: 5s
      - random:
          name: "Insane Random Effect"
          transition_length: 1s
          update_interval: 1s
      - random:          
          name: "Totally Loco Random Effect"
          transition_length: 300ms
          update_interval: 250ms

  # Onboard LEDS
  - platform: status_led
    name: "Onboard LED Green"
    id: "LED_G"
    pin: 
      number: GPIO1
      inverted: true  
  - platform: status_led
    name: "Onboard LED Red"
    id: "LED_R"
    pin: 
      number: GPIO5
      inverted: true         

sensor:
  # Wifi Signal
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 300s
    entity_category: "diagnostic"
    internal: true
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic" 

binary_sensor:
  - platform: gpio
    pin: GPIO2 
    name: "Door"
    device_class: door
    on_press:
      then:
        - light.turn_on:
            id: LED_RGBW          
            effect: none
        - light.turn_on: 
            id: LED_RGBW
            transition_length: 1s
            color_brightness: 0%
            white: 100%
    on_release:
      light.turn_off: 
        id: LED_RGBW  
        transition_length: 2s    

switch: #switches to ground once booted allowing GPIO2 to be used without affecting bootup
    - platform: gpio
      pin: GPIO0 
      id: door_ground
      restore_mode: ALWAYS_OFF 

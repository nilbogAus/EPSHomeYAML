esphome:
  name: esphome-web-9d4d29
  friendly_name: alarm-panel-backdoor

esp32:
  board: nodemcu-32s
  framework:
    type: esp-idf
   # version: recommended
    # Custom sdkconfig options
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y    
      #CONFIG_COMPILER_OPTIMIZATION_PERF: y

# Enable logging
logger:
  level: debug
  logs:
    component: ERROR  # To disable "Component display took a long time for an operation (0.09 s)."

# Enable Home Assistant API
api:
  encryption:
    key: "BysUHdBou2rJs+vWwHhjfR7S8on4iZAk9ygnCyldZAk="

ota:
  password: "629fe3d6315442679212d207c06c4060"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-9D4D29"
    password: "UlcnnFZkrkiH"

captive_portal:
    

debug:
  update_interval: 300s

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
      id: DeviceInfo
    reset_reason:
      name: "Reset Reason"    


time:
  - platform: homeassistant
    id: homeassistant_time    

output:
  - id: backlight_output
    platform: gpio
    pin: GPIO25

light:
  - platform: binary
    name: "Display Backlight"
    id: Backlight
    restore_mode: ALWAYS_ON
    output: backlight_output


sensor:
    # Wifi Signal
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 300s
    entity_category: "diagnostic"
    internal: true
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    id: wifi_signal_pct
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic" 
    
    #debug
  - platform: debug
    free:
      name: "Heap Free"
      id: HeapFree
    block:
      name: "Heap Max Block"
      id: HeapMaxBlock
    loop_time:
      name: "Loop Time"
      id: LoopTime
    psram:
      name: "Free PSRAM"
      id: freePSRAM     
  - platform: internal_temperature
    name: "Internal Temperature" 
    id: InternalTemp   

#ST7796 display
spi:
  - id: display_spi
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12  


display:
  - platform: ili9xxx
    model: ST7796
    id: my_display
    spi_id: display_spi
    dc_pin: GPIO27
    reset_pin: GPIO33
    cs_pin: GPIO15
    dimensions:  #320x480 not possible because of ESP32 memory limitations
      width: 320
      height: 480
    rotation: 180
    color_palette: IMAGE_ADAPTIVE # NONE 
    color_palette_images: benji.png
    data_rate: 80MHz
    pages:
      - id: pageA
        lambda: |-
          it.fill(my_white);
          it.image(0, 30, id(img_benji));
      - id: pageB
        lambda: |-
          it.fill(COLOR_OFF); // Turn the whole display off.
          it.print(10, 10, id(roboto), id(my_red), TextAlign::TOP_LEFT, "Hello World!");
          it.rectangle(0, 0, it.get_width(), it.get_height());      
      - id: pageC
        lambda: |-
          it.fill(COLOR_OFF); // Turn the whole display off.
          it.print(10, 10, id(roboto), id(my_red), TextAlign::TOP_LEFT, "Page C");
          it.rectangle(0, 0, it.get_width(), it.get_height()); 
      - id: pageD
        lambda: |-
          int shift_x = (it.get_width()-310)/2;
          int shift_y = (it.get_height()-470)/2;
          for(auto i = 0; i<470; i++) {
            it.horizontal_line(shift_x+  0,i+shift_y,50, my_red.fade_to_white(i));
            it.horizontal_line(shift_x+ 50,i+shift_y,50, my_red.fade_to_black(i));

            it.horizontal_line(shift_x+105,i+shift_y,50, my_green.fade_to_white(i));
            it.horizontal_line(shift_x+155,i+shift_y,50, my_green.fade_to_black(i));

            it.horizontal_line(shift_x+210,i+shift_y,50, my_blue.fade_to_white(i));
            it.horizontal_line(shift_x+260,i+shift_y,50, my_blue.fade_to_black(i));
          }
          it.rectangle(0, 0, it.get_width(), it.get_height(), my_yellow);             
      - id: pageDebug1
        lambda: |-
            it.fill(COLOR_OFF); // Turn the whole display off.
            it.printf(0, 1, id(roboto), id(my_white), TextAlign::TOP_LEFT, "%.1f° :Internal Temp", id(InternalTemp).state);  
            it.printf(0, 25, id(roboto), id(my_white), TextAlign::TOP_LEFT, "%.0f%% :wifi signal", id(wifi_signal_pct).state);  
            it.printf(0, 75, id(roboto), id(my_white), TextAlign::TOP_LEFT, "%.0fKb Heap Free", id(HeapFree).state/1024); 
            it.printf(0, 100, id(roboto), id(my_white), TextAlign::TOP_LEFT, "%.0fKb Heap Max Block", id(HeapMaxBlock).state/1024); 
            it.printf(0, 125, id(roboto), id(my_white), TextAlign::TOP_LEFT, "%.0fms Loop Time", id(LoopTime).state); 
            it.printf(0, 50, id(roboto), id(my_white), TextAlign::TOP_LEFT, "%.0fKb Free PSRAM", id(freePSRAM).state/1024); 

            int shift_y = 150;
            std::string str = id(DeviceInfo).state;
            std::vector<std::string> v;
            char * token;
            char seps[] = "|";
            token = strtok (&str[0],seps);
            while (token != NULL)
            {
              v.push_back(token);
              token = strtok (NULL, seps);
            }
            for ( std::string s : v ) {
              shift_y += 12;             
              it.printf(0, shift_y, id(roboto_sml), id(my_white), TextAlign::TOP_LEFT, "%s", s.c_str());
            }

            it.strftime(0, 450, id(roboto), "%H:%M:%S", id(homeassistant_time).now());
      - id: pageDebug2
        lambda: |-
            it.fill(COLOR_OFF); // Turn the whole display off.
            it.print(0,0, roboto, "Temp");
            it.graph(0, 0, id(InternalTemp_graph));
            it.print(0,155, roboto, "Wifi");
            it.graph(0, 155, id(wifi_graph));
            it.print(0, 310, roboto, "loop time");
            it.graph(0, 310, id(LoopTime_graph));
            it.strftime(0, 460, id(roboto_sml), "%H:%M:%S", id(homeassistant_time).now());

color:
  - id: my_blue
    blue: 100%
  - id: my_red
    red: 100%
  - id: my_green
    green: 100%
  - id: my_white
    red: 100%
    blue: 100%
    green: 100%
  - id: my_yellow
    hex: ffff00      

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 25
    glyphs: '|!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'          
  - file: "gfonts://Roboto"
    id: roboto_sml
    size: 12
    glyphs: '|!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'          

binary_sensor: 
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    name: "Onboard button"
    id: onboard_button
    on_press: 
      then:
        if:
          condition:
            display.is_displaying_page: pageDebug1
          then:      
            display.page.show: pageDebug2
          else: 
            display.page.show: pageDebug1

button:
  - platform: template
    name: Debug
    entity_category: "diagnostic"     
    on_press:
      then:
        if:
          condition:
            display.is_displaying_page: pageDebug1
          then:      
            display.page.show: pageDebug2
          else: 
            display.page.show: pageDebug1

graph:
  - id: InternalTemp_graph
    duration: 24h
    width: 320 
    height: 150
    x_grid: 6h
    y_grid: 10 
    border: false
    max_range: 65
    min_range: 40
    traces:
      - sensor: InternalTemp
        color: my_red       
  - id: wifi_graph
    duration: 24h
    width: 320 
    height: 150
    x_grid: 6h
    y_grid: 10 
    max_range: 100
    min_range: 1
    border: false
    traces:
      - sensor: wifi_signal_pct
        color: my_green      
  - id: LoopTime_graph
    duration: 24h
    width: 320 
    height: 150
    x_grid: 6h
    y_grid: 10 
    border: false
    traces:
      - sensor: LoopTime
        color: my_blue                            
      
image:
  - file: "benji.png"
    id: img_benji
    resize: 320x425            
    type: RGB24

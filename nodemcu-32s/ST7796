esphome:
  name: "alarm-panel"
  friendly_name: "alarm-panel"

esp32:
  board: nodemcu-32s

# Enable logging
logger:
  logs:
    component: ERROR  # To disable "Component display took a long time for an operation (0.09 s)."

# Enable Home Assistant API
api:
  encryption:
    key: "tpBl4yhEfKCgTAh33ftrhsvG1kHc5HrxHJtUV5uUuoU="

ota:
  password: "629fe3d6315442679212d207c06c4060"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ap Fallback Hotspot"
    password: "xHxEJF8WbVXW"

output:
    # external leds
  - id: backlight_output
    platform: gpio
    pin: GPIO25


light:
  # Onboard LED
  - platform: status_led
    name: "Onboard LED"
    id: "Onboard_LED"
    pin: 
      number: GPIO2
    effects:
      - strobe:
          name: Slow Flash        
          colors:
            - state: True
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: Fast Flash
          colors:
            - state: True
              duration: 200ms
            - state: False
              duration: 200ms
  - platform: binary
    name: "Display Backlight"
    id: Backlight
    restore_mode: ALWAYS_ON
    output: backlight_output
              
sensor:
    # Wifi Signal
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 300s
    entity_category: "diagnostic"
    internal: true
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"   

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    name: "Onboard button"
    id: onboard_button
    on_press: 
      - display.page.show_next: my_display
      - component.update: my_display

#ST7796 display
spi:
  - id: display_spi
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12 
  - id: touch_spi
    clk_pin: GPIO18
    mosi_pin: GPIO23
    miso_pin: GPIO19 

display:
  - platform: ili9xxx
    model: ST7796
    id: my_display
    spi_id: display_spi
    dc_pin: GPIO27
    reset_pin: GPIO33
    cs_pin: GPIO15
    dimensions:  #320x480 not possible because of ESP32 memory limitations
      width: 320
      height: 345
      offset_height: 65
    color_palette: NONE 
    data_rate: 80MHz
    pages:
      - id: page1
        lambda: |-
          int shift_x = (it.get_width()-310)/2;
          int shift_y = (it.get_height()-256)/2;
          for(auto i = 0; i<256; i++) {
            it.horizontal_line(shift_x+  0,i+shift_y,50, my_red.fade_to_white(i));
            it.horizontal_line(shift_x+ 50,i+shift_y,50, my_red.fade_to_black(i));

            it.horizontal_line(shift_x+105,i+shift_y,50, my_green.fade_to_white(i));
            it.horizontal_line(shift_x+155,i+shift_y,50, my_green.fade_to_black(i));

            it.horizontal_line(shift_x+210,i+shift_y,50, my_blue.fade_to_white(i));
            it.horizontal_line(shift_x+260,i+shift_y,50, my_blue.fade_to_black(i));
          }
          it.filled_rectangle(0, it.get_height()-30, it.get_width(),it.get_height()-20, my_red);
          it.filled_rectangle(0, it.get_height()-20, it.get_width(),it.get_height()-10, my_green);
          it.filled_rectangle(0, it.get_height()-10, it.get_width(),it.get_height()-1, my_blue);
          it.rectangle(0, 0, it.get_width(), it.get_height(), my_yellow);
      - id: page2
        lambda: |-
          it.fill(COLOR_OFF); // Turn the whole display off.
          it.print(10, 10, id(roboto), id(my_red), TextAlign::TOP_LEFT, "Hello World!");
          it.rectangle(0, 0, it.get_width(), it.get_height());          

color:
  - id: my_blue
    blue: 100%
  - id: my_red
    red: 100%
  - id: my_green
    green: 100%
  - id: my_white
    red: 100%
    blue: 100%
    green: 100%
  - id: my_yellow
    hex: ffff00      

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 25

touchscreen:
  platform: xpt2046
  calibration_x_min: 3940
  calibration_x_max: 182
  calibration_y_min: 242
  calibration_y_max: 3952
  id: my_touchscreen
  spi_id: touch_spi
  cs_pin: GPIO5
  interrupt_pin: GPIO17
  on_touch:
  - lambda: |-
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
            );



captive_portal:
    

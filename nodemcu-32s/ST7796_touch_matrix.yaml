esphome:
  name: "alarm-panel"
  friendly_name: "alarm-panel"

esp32:
  board: nodemcu-32s
  framework:
    type: esp-idf
    version: recommended
    # Custom sdkconfig options
    sdkconfig_options:
      #COMPILER_OPTIMIZATION_SIZE: y    
      CONFIG_COMPILER_OPTIMIZATION_PERF: y

# Enable logging
logger:
  level: debug
  logs:
    component: ERROR  # To disable "Component display took a long time for an operation (0.09 s)."

debug:
  update_interval: 300s

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
      id: DeviceInfo
    reset_reason:
      name: "Reset Reason"

# Enable Home Assistant API
api:
  encryption:
    key: "tpBl4yhEfKCgTAh33ftrhsvG1kHc5HrxHJtUV5uUuoU="

ota:
  password: "629fe3d6315442679212d207c06c4060"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ap Fallback Hotspot"
    password: "xHxEJF8WbVXW"

output:
    # external leds
  - id: backlight_output
    platform: gpio
    pin: GPIO25


light:
  # Onboard LED
  - platform: status_led
    name: "Onboard LED"
    id: "Onboard_LED"
    pin: 
      number: GPIO2
    effects:
      - strobe:
          name: Slow Flash        
          colors:
            - state: True
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: Fast Flash
          colors:
            - state: True
              duration: 200ms
            - state: False
              duration: 200ms
  - platform: binary
    name: "Display Backlight"
    id: Backlight
    restore_mode: ALWAYS_ON
    output: backlight_output
              
sensor:
    # Wifi Signal
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 300s
    entity_category: "diagnostic"
    internal: true
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    id: wifi_signal_pct
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"  
    
    #debug
  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"
    psram:
      name: "Free PSRAM"     
  - platform: internal_temperature
    name: "Internal Temperature" 
    id: InternalTemp     

#ST7796 display
spi:
  - id: display_spi
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12 
  - id: touch_spi
    clk_pin: GPIO18
    mosi_pin: GPIO23
    miso_pin: GPIO19 

display:
  - platform: ili9xxx
    model: ST7796
    id: my_display
    spi_id: display_spi
    dc_pin: GPIO27
    reset_pin: GPIO33
    cs_pin: GPIO15
    dimensions:  #320x480 not possible because of ESP32 memory limitations
      width: 320
      height: 345
      offset_height: 65
    rotation: 180
    color_palette: NONE 
    data_rate: 80MHz
    pages:
      - id: pageA
        lambda: |-
          int shift_x = (it.get_width()-310)/2;
          int shift_y = (it.get_height()-256)/2;
          for(auto i = 0; i<256; i++) {
            it.horizontal_line(shift_x+  0,i+shift_y,50, my_red.fade_to_white(i));
            it.horizontal_line(shift_x+ 50,i+shift_y,50, my_red.fade_to_black(i));

            it.horizontal_line(shift_x+105,i+shift_y,50, my_green.fade_to_white(i));
            it.horizontal_line(shift_x+155,i+shift_y,50, my_green.fade_to_black(i));

            it.horizontal_line(shift_x+210,i+shift_y,50, my_blue.fade_to_white(i));
            it.horizontal_line(shift_x+260,i+shift_y,50, my_blue.fade_to_black(i));
          }
          it.filled_rectangle(0, it.get_height()-30, it.get_width(),it.get_height()-20, my_red);
          it.filled_rectangle(0, it.get_height()-20, it.get_width(),it.get_height()-10, my_green);
          it.filled_rectangle(0, it.get_height()-10, it.get_width(),it.get_height()-1, my_blue);
          it.rectangle(0, 0, it.get_width(), it.get_height(), my_yellow);
      - id: pageB
        lambda: |-
          it.fill(COLOR_OFF); // Turn the whole display off.
          it.print(10, 10, id(roboto), id(my_red), TextAlign::TOP_LEFT, "Hello World!");
          it.rectangle(0, 0, it.get_width(), it.get_height());      
      - id: pageC
        lambda: |-
          it.fill(COLOR_OFF); // Turn the whole display off.
          it.print(10, 10, id(roboto), id(my_red), TextAlign::TOP_LEFT, "Page C");
          it.rectangle(0, 0, it.get_width(), it.get_height()); 
      - id: pageD
        lambda: |-
          it.fill(COLOR_OFF); // Turn the whole display off.
          it.print(10, 10, id(roboto), id(my_red), TextAlign::TOP_LEFT, "Page D");
          it.rectangle(0, 0, it.get_width(), it.get_height());              
      - id: pageDebug
        lambda: |-
            it.fill(COLOR_OFF); // Turn the whole display off.
            it.printf(5, 1, id(roboto), id(my_white), TextAlign::TOP_LEFT, "%.1fÂ° :Internal Temp", id(InternalTemp).state);  
            it.printf(0, 25, id(roboto), id(my_white), TextAlign::TOP_LEFT, "%.0f%% :wifi signal", id(wifi_signal_pct).state);  
            // it.printf(5, 50, id(roboto), id(my_white), TextAlign::TOP_LEFT, id(DeviceInfo)); 
            it.graph(0, 75, id(h24_graph));
            


color:
  - id: my_blue
    blue: 100%
  - id: my_red
    red: 100%
  - id: my_green
    green: 100%
  - id: my_white
    red: 100%
    blue: 100%
    green: 100%
  - id: my_yellow
    hex: ffff00      

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 25

touchscreen:
  platform: xpt2046
  calibration_x_min: 3940
  calibration_x_max: 182
  calibration_y_min: 242
  calibration_y_max: 3952
  id: my_touchscreen
  spi_id: touch_spi
  cs_pin: GPIO5
  interrupt_pin: GPIO17
  on_touch:
  - lambda: |-
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
            );


matrix_keypad:
  id: keypad
  columns:
    - pin: 
        number: GPIO35 # GPIO34
        mode: 
          input: True
    - pin: 
        number: GPIO16
        mode: 
          input: True
    - pin: 
        number: GPIO21
        mode: 
          input: True
    - pin: 
        number: GPIO3
        mode: 
          input: True  
  rows:
    - pin: GPIO4
    - pin: GPIO22
    - pin: GPIO26
    - pin: GPIO32
  keys: "123A456B789C*0#D"
  has_diodes: false

binary_sensor:
  - platform: matrix_keypad
    keypad_id: keypad
    id: keypadA
    name: keypadA
    key: A
    on_press:
      - logger.log: "A Pressed"
      - display.page.show: pageA
      - component.update: my_display
    on_release:
      - logger.log: "A Released"      
  - platform: matrix_keypad
    keypad_id: keypad
    id: keypadB
    name: keypadB  
    key: B
    on_press:
      - logger.log: "B Pressed"
      - display.page.show: pageB
      - component.update: my_display
    on_release:
      - logger.log: "B Released"        
  - platform: matrix_keypad
    keypad_id: keypad
    id: keypadC
    name: keypadC 
    key: C
    on_press:
      - logger.log: "C Pressed"
      - display.page.show: pageC
      - component.update: my_display
    on_release:
      - logger.log: "C Released"        
  - platform: matrix_keypad
    keypad_id: keypad
    id: keypadD
    name: keypadD
    key: D
    on_press:
      - logger.log: "D Pressed"
      - display.page.show: pageD
      - component.update: my_display
    on_release:
      - logger.log: "D Released"    

  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    name: "Onboard button"
    id: onboard_button
    on_press: 
      - display.page.show: pageDebug
      - component.update: my_display

button:
  - platform: template
    name: Debug
    on_press:
      - display.page.show: pageDebug
      - component.update: my_display      

key_collector:
  - id: pincode_reader
    source_id: keypad
    end_keys: "#"
    end_key_required: true 
    clear_keys: "*"
    allowed_keys: "0123456789"
    timeout: 60s
    on_progress:
      - logger.log:
          format: "input progress: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
    on_result:
      - logger.log:
          format: "input result: '%s', started by '%c', ended by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)", "(end == 0 ? '~' : end)" ]
    on_timeout:
      - logger.log:
          format: "input timeout: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]

graph:
  - id: h24_graph
    duration: 24h
    width: 320 
    height: 200
    x_grid: 6h
    y_grid: 10 
    border: false
    traces:
      - sensor: InternalTemp
        color: my_red            
